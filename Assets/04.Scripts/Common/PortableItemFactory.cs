using UnityEngine;

/// <summary>
/// A factory for initializing new portable items based on the factories
/// serialized array of item details.
/// </summary>
[CreateAssetMenu(fileName="New Portable Item Factory", menuName="Scriptable Objects/Factories/Portable Item Factory")]
public class PortableItemFactory : ScriptableObject {
  /// <summary>
  /// An array of details for items that can be generated by this factory.
  /// </summary>
  public PortableItemDetails[] items;

  /// <summary>
  /// Create a copy of an item.
  /// </summary>
  /// <param name="item">The item to copy.</param>
  /// <returns>A new portable item based on the provided item.</returns>
  public PortableItem CreateItem(PortableItem item) {
    return this.CreateItem(item.details);
  }

  /// <summary>
  /// Create a portable item from the given details.
  /// </summary>
  /// <param name="details">The item details to use.</param>
  /// <returns>An item based on the given details.</returns>
  public PortableItem CreateItem(PortableItemDetails details) {
    PortableItem item = ScriptableObject.CreateInstance<PortableItem>();
    item.details = details;
    return item;
  }

  /// <summary>
  /// Creates a random item from the list of possible items.
  /// </summary>
  /// <returns>
  /// A new <c>PortableItem</c> based on the randomly selected details.
  /// </returns>
  public PortableItem CreateRandomItem() {
    return CreateItem(items[StaticRandom.Range(0, items.Length)]);
  }
}